    --------------------------------
    Convert transform
    public Vector3 destination;

    Vector3 point;
    Vector3 vector;
    Vector3 direction;

    void Start()
    {
        Debug.Log("Local position" + transform.localPosition);
        Debug.Log("Local rotation(E)" + transform.localEulerAngles);
        Debug.Log("Local rotation" + transform.localRotation);
        //The difference between EulerRotation and rotation
        //Rotation is a quantanion and eulerangle is Vector3

        //Test the direction of a gameobject's vector3
        //Transforms destination's position from local space to world space.
        point = transform.TransformPoint(destination);
        // Transforms destination's vector from local space to world space.
        vector = transform.TransformDirection(destination);
        // Transforms destination's direction from local space to world space.
        direction = transform.TransformDirection(destination);

    }
    --------------------------------------------------
    public class ModifierTransform : MonoBehaviour
{
    public Transform targettransform;
    public Vector3 orbit;
    void Start()
    {
        transform.Translate(Vector3.forward);
        //Move forward as the targettransform object--Z axis
        transform.Translate(Vector3.forward, targettransform);

        //Set position and rotation at once
        //If the syntex required a quternion, use quaternion.Euler to convert
        transform.SetPositionAndRotation(new Vector3(1f, 2f, 3f), Quaternion.Euler(Vector3.forward));
        //Brutally set the position to the specific place;

        //Rotation
        transform.Rotate(new Vector3(10f, 20f, 30f));
        transform.Rotate(Vector3.forward, 45f);

        //Orbit 
        //The object rotation use a vector as it's rotate center
        transform.RotateAround(orbit, Vector3.up, 90f);

        //LookAt
        transform.LookAt(targettransform);
        transform.LookAt(targettransform, Vector3.right);

        //Check for change
        Debug.Log("The object has changed" + transform.hasChanged);
    }
